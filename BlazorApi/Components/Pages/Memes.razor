@page "/memes"
@using BlazorApi.Models
@using BlazorApi.Services
@inject ApiService API
@inject IJSRuntime JS
@inject NavigationManager Navigation

<div class="container">
    <div class="row">
        @foreach (Meme meme in _memesPage)
        {
            <div class="row meme-row my-2 py-2">
                <div class="col">
                    @if (meme.MimeType.Contains("video"))
                    {
                        <video class="meme-row__image" controls>
                            <source src="data:@meme.MimeType;base64,@Convert.ToBase64String(meme.FileData)" type="video/mp4">
                            Your browser does not support the video tag.
                        </video>
                    }
                    else
                    {
                        <img class="meme-row__image" src="data:@meme.MimeType;base64,@Convert.ToBase64String(meme.FileData)"
                             alt="@meme.Name"/>
                    }
                </div>
                <div class="col">
                    @meme.Id: @meme.Name
                </div>
                <div class="col">
                    @meme.MimeType
                </div>
                <div class="col">
                    @(string.IsNullOrEmpty(meme.AddedBy) ? "N/A" : meme.AddedBy)
                </div>
            </div>
        }
    </div>
</div>

@code {

    private int _currentPage;
    private List<Meme> _memesPage = [];

    protected override async Task OnInitializedAsync()
    {
        // Parse the query string "page" parameter
        var uri = Navigation.ToAbsoluteUri(Navigation.Uri);
        if (Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query)
                .TryGetValue("page", out var pageString) && int.TryParse(pageString, out int pageValue))
        {
            _currentPage = pageValue;
        }
        else
        {
            _currentPage = 1; // Default to 1 if "page" not specified
        }

        await GetMemes();
    }

    private async Task GetMemes()
    {
        var (msg, memes) = await API.GetMemesPageAsync(_currentPage);
        if (memes == null)
        {
            Console.WriteLine(msg);
            return;
        }

        _memesPage = memes;
    }

}